{"ast":null,"code":"var _jsxFileName = \"/Users/rossmacdonald/Projects/parkfinder/src/Location/Location.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Location.css';\nimport apiKey from 'src/config.js';\nlet autoComplete;\n\nconst loadScript = (url, callback) => {\n  let script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n\n  if (script.readyState) {\n    script.onreadystatechange = function () {\n      if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n        script.onreadystatechange = null;\n        callback();\n      }\n    };\n  } else {\n    script.onload = () => callback();\n  }\n\n  script.src = url;\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n};\n\nfunction handleScriptLoad(updateQuery, autoCompleteRef) {\n  autoComplete = new window.google.maps.places.Autocomplete(autoCompleteRef.current, {\n    types: [\"(cities)\"],\n    componentRestrictions: {\n      country: \"us\"\n    }\n  });\n  autoComplete.setFields([\"address_components\", \"formatted_address\"]);\n  autoComplete.addListener(\"place_changed\", () => handlePlaceSelect(updateQuery));\n}\n\nasync function handlePlaceSelect(updateQuery) {\n  const addressObject = autoComplete.getPlace();\n  const location = addressObject.formatted_address;\n  updateQuery(location);\n  console.log(addressObject);\n}\n\nfunction Location() {\n  const [location, setLocation] = useState(\"\");\n  const autoCompleteRef = useRef(null);\n\n  const getLocation = e => {\n    setLocation(e.target.value);\n  };\n\n  useEffect(() => {\n    loadScript(`https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`, () => handleScriptLoad(setLocation, autoCompleteRef));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: autoCompleteRef,\n    onChange: getLocation,\n    id: \"location-input\",\n    type: \"text\",\n    placeholder: \"Location...\",\n    value: location,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default Location;\n/* export default function Location(){\n    const [location, setLocation] = useState('')\n    const getLocation = (e) => {\n        setLocation(e.target.value)\n    }\n    return (\n        <div className=\"location\">\n             <input onChange={getLocation} id=\"location-input\" type=\"text\" placeholder=\"Location...\" value={location}/>\n        </div>\n    )\n} */","map":{"version":3,"sources":["/Users/rossmacdonald/Projects/parkfinder/src/Location/Location.js"],"names":["React","useState","useEffect","useRef","apiKey","autoComplete","loadScript","url","callback","script","document","createElement","type","readyState","onreadystatechange","onload","src","getElementsByTagName","appendChild","handleScriptLoad","updateQuery","autoCompleteRef","window","google","maps","places","Autocomplete","current","types","componentRestrictions","country","setFields","addListener","handlePlaceSelect","addressObject","getPlace","location","formatted_address","console","log","Location","setLocation","getLocation","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Location.css';\nimport apiKey from 'src/config.js'\n\n\nlet autoComplete;\n\nconst loadScript = (url, callback) => {\n  let script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n\n  if (script.readyState) {\n    script.onreadystatechange = function() {\n      if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n        script.onreadystatechange = null;\n        callback();\n      }\n    };\n  } else {\n    script.onload = () => callback();\n  }\n\n  script.src = url;\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n};\n\nfunction handleScriptLoad(updateQuery, autoCompleteRef) {\n  autoComplete = new window.google.maps.places.Autocomplete(\n    autoCompleteRef.current,\n    { types: [\"(cities)\"], componentRestrictions: { country: \"us\" } }\n  );\n  autoComplete.setFields([\"address_components\", \"formatted_address\"]);\n  autoComplete.addListener(\"place_changed\", () =>\n    handlePlaceSelect(updateQuery)\n  );\n}\n\nasync function handlePlaceSelect(updateQuery) {\n  const addressObject = autoComplete.getPlace();\n  const location = addressObject.formatted_address;\n  updateQuery(location);\n  console.log(addressObject);\n}\n\nfunction Location() {\n  const [location, setLocation] = useState(\"\");\n  const autoCompleteRef = useRef(null);\n\n  const getLocation = (e) => {\n    setLocation(e.target.value)\n}\n  useEffect(() => {\n    loadScript(\n      `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`,\n      () => handleScriptLoad(setLocation, autoCompleteRef)\n    );\n  }, []);\n\n  return (\n    <div className=\"location\">\n    <input ref={autoCompleteRef} onChange={getLocation} id=\"location-input\" type=\"text\" placeholder=\"Location...\" value={location}/>\n</div>\n  );\n}\n\nexport default Location;\n\n\n/* export default function Location(){\n    const [location, setLocation] = useState('')\n    const getLocation = (e) => {\n        setLocation(e.target.value)\n    }\n    return (\n        <div className=\"location\">\n             <input onChange={getLocation} id=\"location-input\" type=\"text\" placeholder=\"Location...\" value={location}/>\n        </div>\n    )\n} */"]},"metadata":{},"sourceType":"module"}