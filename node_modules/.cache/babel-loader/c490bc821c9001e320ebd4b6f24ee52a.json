{"ast":null,"code":"var _jsxFileName = \"/Users/rossmacdonald/Projects/parkfinder/src/Map/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport { withProps, lifecycle, compose } from 'recompose';\nimport SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\nimport apiKey from '../config';\nimport _ from 'lodash';\nGeocode.setApiKey(apiKey);\nGeocode.enableDebug();\nconst MapComponent = compose(withProps({\n  googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${apiKey}&v=3.exp&libraries=geometry,drawing,places`,\n  loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 23\n    }\n  }),\n  containerElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `400px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 25\n    }\n  }),\n  mapElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 19\n    }\n  })\n}), lifecycle({\n  componentWillMount() {\n    const refs = {};\n    this.setState({\n      bounds: null,\n      center: {\n        lat: 41.9,\n        lng: -87.624\n      },\n      markers: [],\n      onMapMounted: ref => {\n        refs.map = ref;\n      },\n      onBoundsChanged: () => {\n        this.setState({\n          bounds: refs.map.getBounds(),\n          center: refs.map.getCenter()\n        });\n      },\n      onSearchBoxMounted: ref => {\n        refs.searchBox = ref;\n      },\n      onPlacesChanged: () => {\n        const places = refs.searchBox.getPlaces();\n        const bounds = new window.google.maps.LatLngBounds();\n        places.forEach(place => {\n          if (place.geometry.viewport) {\n            bounds.union(place.geometry.viewport);\n          } else {\n            bounds.extend(place.geometry.location);\n          }\n        });\n        const nextMarkers = places.map(place => ({\n          position: place.geometry.location\n        }));\n\n        const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\n\n        this.setState({\n          center: nextCenter,\n          markers: nextMarkers\n        }); // refs.map.fitBounds(bounds);\n      }\n    });\n  }\n\n}), withScriptjs, withGoogleMap)(props => /*#__PURE__*/React.createElement(GoogleMap, {\n  ref: props.onMapMounted,\n  defaultZoom: 15,\n  center: props.center,\n  onBoundsChanged: props.onBoundsChanged,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(SearchBox, {\n  ref: props.onSearchBoxMounted,\n  bounds: props.bounds,\n  controlPosition: window.google.maps.ControlPosition.TOP_LEFT,\n  onPlacesChanged: props.onPlacesChanged,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  placeholder: \"Customized your placeholder\",\n  style: {\n    boxSizing: `border-box`,\n    border: `1px solid transparent`,\n    width: `240px`,\n    height: `32px`,\n    marginTop: `27px`,\n    padding: `0 12px`,\n    borderRadius: `3px`,\n    boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n    fontSize: `14px`,\n    outline: `none`,\n    textOverflow: `ellipses`\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }\n})), props.markers.map((marker, index) => /*#__PURE__*/React.createElement(Marker, {\n  key: index,\n  position: marker.position,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }\n}))));\nexport default MapComponent;","map":{"version":3,"sources":["/Users/rossmacdonald/Projects/parkfinder/src/Map/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","withProps","lifecycle","compose","SearchBox","apiKey","_","setApiKey","enableDebug","MapComponent","googleMapURL","loadingElement","height","containerElement","mapElement","componentWillMount","refs","setState","bounds","center","lat","lng","markers","onMapMounted","ref","map","onBoundsChanged","getBounds","getCenter","onSearchBoxMounted","searchBox","onPlacesChanged","places","getPlaces","window","google","maps","LatLngBounds","forEach","place","geometry","viewport","union","extend","location","nextMarkers","position","nextCenter","get","state","props","ControlPosition","TOP_LEFT","boxSizing","border","width","marginTop","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","marker","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport { withProps, lifecycle, compose } from 'recompose';\nimport SearchBox from \"react-google-maps/lib/components/places/SearchBox\"\nimport apiKey from '../config';\nimport _ from 'lodash';\n\nGeocode.setApiKey( apiKey );\nGeocode.enableDebug();\n\nconst MapComponent = compose(\n    withProps({\n      googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${apiKey}&v=3.exp&libraries=geometry,drawing,places`,\n      loadingElement: <div style={{ height: `100%` }} />,\n      containerElement: <div style={{ height: `400px` }} />,\n      mapElement: <div style={{ height: `100%` }} />,\n    }),\n    lifecycle({\n      componentWillMount() {\n        const refs = {}\n  \n        this.setState({\n          bounds: null,\n          center: {\n            lat: 41.9, lng: -87.624\n          },\n          markers: [],\n          onMapMounted: ref => {\n            refs.map = ref;\n          },\n          onBoundsChanged: () => {\n            this.setState({\n              bounds: refs.map.getBounds(),\n              center: refs.map.getCenter(),\n            })\n          },\n          onSearchBoxMounted: ref => {\n            refs.searchBox = ref;\n          },\n          onPlacesChanged: () => {\n            const places = refs.searchBox.getPlaces();\n            const bounds = new window.google.maps.LatLngBounds();\n  \n            places.forEach(place => {\n              if (place.geometry.viewport) {\n                bounds.union(place.geometry.viewport)\n              } else {\n                bounds.extend(place.geometry.location)\n              }\n            });\n            const nextMarkers = places.map(place => ({\n              position: place.geometry.location,\n            }));\n            const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\n  \n            this.setState({\n              center: nextCenter,\n              markers: nextMarkers,\n            });\n            // refs.map.fitBounds(bounds);\n          },\n        })\n      },\n    }),\n    withScriptjs,\n    withGoogleMap\n  )(props =>\n    <GoogleMap\n      ref={props.onMapMounted}\n      defaultZoom={15}\n      center={props.center}\n      onBoundsChanged={props.onBoundsChanged}\n    >\n      <SearchBox\n        ref={props.onSearchBoxMounted}\n        bounds={props.bounds}\n        controlPosition={window.google.maps.ControlPosition.TOP_LEFT}\n        onPlacesChanged={props.onPlacesChanged}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Customized your placeholder\"\n          style={{\n            boxSizing: `border-box`,\n            border: `1px solid transparent`,\n            width: `240px`,\n            height: `32px`,\n            marginTop: `27px`,\n            padding: `0 12px`,\n            borderRadius: `3px`,\n            boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n            fontSize: `14px`,\n            outline: `none`,\n            textOverflow: `ellipses`,\n          }}\n        />\n      </SearchBox>\n      {props.markers.map((marker, index) =>\n        <Marker key={index} position={marker.position} />\n      )}\n    </GoogleMap>\n  );\n\nexport default MapComponent"]},"metadata":{},"sourceType":"module"}